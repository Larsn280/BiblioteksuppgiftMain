// <auto-generated />
using BiblioteksuppgiftMain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiblioteksuppgiftMain.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220114113738_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BiblioteksuppgiftMain.Boklånare", b =>
                {
                    b.Property<string>("LåneKort")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EfterNamn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FörNamn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LåneKort");

                    b.ToTable("Boklånare");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Book", b =>
                {
                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AntalILager")
                        .HasColumnType("int");

                    b.Property<int>("Betyg")
                        .HasColumnType("int");

                    b.Property<int>("UtgivningsÅr")
                        .HasColumnType("int");

                    b.Property<string>("_BokTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Isbn");

                    b.ToTable("Böcker");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.BöckerOchFörfattare", b =>
                {
                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("_Författare")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Isbn", "_Författare");

                    b.HasIndex("_Författare");

                    b.ToTable("BöckerOchFörfattare");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Författare", b =>
                {
                    b.Property<string>("_Författare")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FödelseÅr")
                        .HasColumnType("int");

                    b.HasKey("_Författare");

                    b.ToTable("Författare");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Utlåningar", b =>
                {
                    b.Property<string>("Lånekort")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Lånedatum")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Returdatum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lånekort", "Isbn");

                    b.HasIndex("Isbn");

                    b.ToTable("Utlåningar");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.BöckerOchFörfattare", b =>
                {
                    b.HasOne("BiblioteksuppgiftMain.Book", "Book")
                        .WithMany("BöckerOchFörfattare")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioteksuppgiftMain.Författare", "Författare")
                        .WithMany("BöckerOchFörfattare")
                        .HasForeignKey("_Författare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Författare");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Utlåningar", b =>
                {
                    b.HasOne("BiblioteksuppgiftMain.Book", "Book")
                        .WithMany("Utlåningar")
                        .HasForeignKey("Isbn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioteksuppgiftMain.Boklånare", "Boklånare")
                        .WithMany("Utlåningar")
                        .HasForeignKey("Lånekort")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boklånare");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Boklånare", b =>
                {
                    b.Navigation("Utlåningar");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Book", b =>
                {
                    b.Navigation("BöckerOchFörfattare");

                    b.Navigation("Utlåningar");
                });

            modelBuilder.Entity("BiblioteksuppgiftMain.Författare", b =>
                {
                    b.Navigation("BöckerOchFörfattare");
                });
#pragma warning restore 612, 618
        }
    }
}
